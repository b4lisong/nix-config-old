{ config, pkgs, modulesPath, ... }:

let
  user = "balisong";

in
{
  imports =
    [
      # Include the default lxd configuration.
      "${modulesPath}/virtualisation/lxc-container.nix"
      # Include the container-specific autogenerated configuration.
      ./lxd.nix
      # Include the OrbStack-specific configuration.
      ./orbstack.nix
      # Include shared config
      ../../modules/shared
    ];

  # NixOS settings
  nix = {
    settings = {
      experimental-features = [ "nix-command" "flakes" ];
      allowed-users = [ "${user}" ];
    };
    package = pkgs.nix;
    gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 7d";
    };
  };

  # Environment settings
  environment = {
    enableAllTerminfo = true; # bc kitty, mostly
    systemPackages = with pkgs; [
      vim
      wget
      curl
      git
      lazygit
    ];
    variables.EDITOR = "vim";
  };
  programs = {
    dconf.enable = true; # need for GTK-related
    zsh.enable = true; # best shell CMV
  };

  services = {
    openssh = {
      enable = true;
      settings = {
        X11Forwarding = true;
        PermitRootLogin = "no";
        # PasswordAuthentication = false;
      };
      # openFirewall = true; #TODO: firewall
    };
  };

  # Enable docker
  virtualisation.docker.enable = true;

  # This being `true` leads to a few nasty bugs, change at your own risk!
  users.mutableUsers = false;

  # Define users
  users.users = {
    ${user} = {
      uid = 501;
      extraGroups = [ "wheel"  "docker"];

      # simulate isNormalUser, but with an arbitrary UID
      isSystemUser = true;
      group = "users";
      createHome = true;
      home = "/home/balisong";
      homeMode = "700";
      # useDefaultShell = true;
      shell = pkgs.zsh;
    };
  };

  # don't require password for sudo
  # bc I hate security
  security.sudo.wheelNeedsPassword = false;


  time.timeZone = "America/Los_Angeles";

  networking = {
    dhcpcd.enable = false;
    useDHCP = false;
    useHostResolvConf = false;
  };

  systemd.network = {
    enable = true;
    networks."50-eth0" = {
      matchConfig.Name = "eth0";
      networkConfig = {
        DHCP = "ipv4";
        IPv6AcceptRA = true;
      };
      linkConfig.RequiredForOnline = "routable";
    };
  };

  system.stateVersion = "unstable"; # Did you read the comment?

}
